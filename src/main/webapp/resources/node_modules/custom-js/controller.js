var app = angular.module('myApp');

var loginApp = angular.module('loginApp');


app.controller('mainController', ['$scope', '$localStorage', 'userDetails', 'userMessageService', function ($scope, $localStorage, userDetails, userMessageService) {
    userDetails.principal(function (resp) {
            $scope.loggedUser = resp.data.userName;
            userMessageService.email = resp.data.email;
            $localStorage.msg = "";
        }, function (error) {
        }
    );
}])

app.controller('userController', ['$scope', 'userInfo', '$localStorage', '$window', function ($scope, userInfo, $localStorage, $window) {

    //init all object
    $scope.validationError = errorObj;
    $scope.user = userObj;
    initCreateUserUI($scope.validationError);
    initCreateUserUI($scope.user);
    $scope.finderloader = false;

    //Submit User Data
    $scope.submitUser = function () {
        $scope.validationError.name = isEmptyFiled($scope.user.name, 'name');
        $scope.validationError.email = isEmptyFiled($scope.user.email, 'email');
        $scope.validationError.password = passwordCheck($scope.user.password, $scope.user.passwordC);
        $scope.validationError.passwordC = isEmptyFiled($scope.user.passwordC, 'passwordC');
        $scope.validationError.phone = isEmptyFiled($scope.user.phone, 'phone');

        //validation
        if ($scope.validationError.name || $scope.validationError.email ||
            $scope.validationError.password || $scope.validationError.passwordC || $scope.validationError.phone) return false;

        $scope.finderloader = true;
        //Create User Object from UI to send server side
        $scope.newObj = createUserObj($scope.user);

        //Call service method to save User object
        userInfo.userSave(function (data) {
            //if logged user not found then redirect to login page
            if (data.invalidUserError) redirectToLogin($localStorage, data, $window, 'other');
            $scope.validationErrorMsg = data.validationError;
            if (data.successMsg) initCreateUserUI($scope.user);
            $scope.successMsg = data.successMsg;
            $scope.finderloader = false;
        }, function (error) {
            $scope.internalError = getErrorMessage(error);
            $scope.finderloader = false;
        }, $scope.newObj);
    }
}]);

app.controller('changePasswordController', ['$scope', '$localStorage', '$window', 'userInfo', 'userMessageService', function ($scope, $localStorage, $window, userInfo, userMessageService) {

    //init all object
    $scope.validationError = passErrorObj;
    $scope.user = passObj;
    $scope.finderloader = false;
    initChangPasswordUI($scope.validationError);
    initChangPasswordUI($scope.user);
    $scope.user.id = userMessageService.id;
    $scope.user.version = userMessageService.version;
    $scope.user.userName = userMessageService.email;

    //Submit  Data
    $scope.save = function () {
        $scope.validationError.oldPassword = isEmptyFiled($scope.user.oldPassword, 'Old password');
        $scope.validationError.newPassword = passwordCheck($scope.user.newPassword, $scope.user.confirmPassword);
        $scope.validationError.confirmPassword = isEmptyFiled($scope.user.confirmPassword, 'confirmPassword');

        //validation
        if ($scope.validationError.oldPassword || $scope.validationError.newPassword ||
            $scope.validationError.confirmPassword) return false;
        $scope.finderloader = true;

        //Call service method to save User object
        userInfo.updatePassword(function (data) {
            //if logged user not found then redirect to login page
            if (data.invalidUserError) redirectToLogin($localStorage, data, $window, 'other');
            $scope.validationErrorMsg = data.validationError;
            $scope.finderloader = false;
            if (data.successMsg) redirectToLogin($localStorage, data, $window, 'changePassword');
        }, function (error) {
            $scope.internalError = getErrorMessage(error);
            $scope.finderloader = false;
        }, $scope.user);
    }
}]);


app.controller('updateUserController', ['$scope', 'userInfo', 'userMessageService', '$localStorage', '$window', function ($scope, userInfo, userMessageService, $localStorage, $window) {
    $scope.loaded = false;

    //load user list to UI
    $scope.userList = userInfo.userList(
        function (data) {
            $scope.userList = data;
            $scope.loaded = true;
        }, function (error) {
        }, userMessageService.email);

    //init all object
    $scope.validationError = errorObj;
    $scope.user = UpdateUserObj;
    initCreateUserUI($scope.validationError);
    initCreateUserUI($scope.user);
    $scope.finderloader = false;


    //check box click load indivisual data to user UI
    $scope.loadUserInfo = function (obj, index) {
        loadUserInfo($scope, obj, index);
    }

    //Submit User Update Data
    $scope.updateUser = function () {
        $scope.validationError.name = isEmptyFiled($scope.user.name, 'name');
        //$scope.validationError.email = isEmptyFiled($scope.user.email, 'email');
        $scope.validationError.phone = isEmptyFiled($scope.user.phone, 'phone');

        //validation
        if ($scope.validationError.name || $scope.validationError.phone) return false;

        $scope.finderloader = true;
        //Create User Object from UI to send server side
        $scope.newObj = updateUserObj($scope.user);

        //Call service method to update User object
        userInfo.updateUser(function (data) {
                //if logged user not found then redirect to login page
                if (data.invalidUserError) redirectToLogin($localStorage, data, $window, 'other');
                $scope.successMsg = data.successMsg;
                $scope.validationErrorMsg = data.validationError;
                if (data.user) {
                    //set server value to user ui part
                    setUiValue($scope.user, data.user);
                    $scope.loaded = false;
                    //set server value to userList ui part
                    //setValueToUserList(data.user.id, data.user,$scope);
                    $scope.userList = userInfo.userList(
                        function (data) {
                            $scope.userList = data;
                            $scope.loaded = true;
                        }, function (error) {
                        }, userMessageService.email);
                }
                $scope.finderloader = false;
            }, function (error) {
                $scope.internalError = getErrorMessage(error);
                $scope.finderloader = false;
            }, $scope.newObj
        );
    }

    //Submit User delete Data
    $scope.deleteUser = function () {
        $scope.validationError.name = isEmptyFiled($scope.user.name, 'name');
        $scope.validationError.email = isEmptyFiled($scope.user.email, 'email');
        $scope.validationError.phone = isEmptyFiled($scope.user.phone, 'phone');

        //validation
        if ($scope.validationError.name || $scope.validationError.email || $scope.validationError.phone) return false;

        $scope.finderloader = true;

        //Call service method to update User object
        userInfo.deleteUser(function (data) {
            //if logged user not found then redirect to login page
            if (data.invalidUserError) redirectToLogin($localStorage, data, $window, 'other');
            $scope.validationErrorMsg = data.validationError;
            $scope.successMsg = data.successMsg;
            if ($scope.successMsg) initUpdateUserUI($scope.user);
            deleteRow($scope.user.id);
            $scope.finderloader = false;
        }, function (error) {
            $scope.internalError = getErrorMessage(error);
            $scope.finderloader = false;
        }, $scope.user);
    }
}]);

// Customer

app.controller('createCustomerController', ['$scope', 'userInfo', function ($scope, userInfo) {

    $scope.validationError = customerErrorObj;
    $scope.customer = customerObj;
    initCreateUserUI($scope.validationError);
    initCreateUserUI($scope.customer);
    $scope.finderloader = false;

    //Submit User Data
    $scope.submitCustomer = function () {
        $scope.validationError.name = isEmptyFiled($scope.customer.name, 'name');
        $scope.validationError.email = isEmptyFiled($scope.customer.email, 'email');
        $scope.validationError.address = isEmptyFiled($scope.customer.email, 'address');
        $scope.validationError.nid = isEmptyFiled($scope.customer.nid, 'nid');
        $scope.validationError.phone = isEmptyFiled($scope.customer.phone, 'phone');

        //validation
        if ($scope.validationError.name || $scope.validationError.email ||
            $scope.validationError.nid || $scope.validationError.address || $scope.validationError.phone) return false;

        $scope.finderloader = true;
        //Create Customer Object from UI to send server side
        $scope.newObj = createCustomerObj($scope.customer);
        //Call service method to save User object
        userInfo.customerSave(function (data) {
            $scope.validationErrorMsg = data.validationError;
            $scope.successMsg = data.successMsg;
            if ($scope.successMsg) clearUI($scope);
            $scope.finderloader = false;
        }, function (error) {
            $scope.internalError = getErrorMessage(error);
            $scope.finderloader = false;
        }, $scope.newObj);


    }


}]);


//
loginApp.controller('loginController', ['$scope', '$localStorage', function ($scope, $localStorage) {
    $scope.successMsg = "";
    $scope.errorMsg = '';
    debugger;
    if ($localStorage.changePassword === 'yes') {
        $scope.successMsg = $localStorage.msg;
        $localStorage.changePassword = '';
        $localStorage.msg = '';
    }
    if ($localStorage.isLoggedUserInvalid == 'yes') {
        $scope.errorMsg = $localStorage.msg;
        $localStorage.isLoggedUserInvalid = '';
        $localStorage.msg = '';
    }
}])


app.controller('otherController', ['$scope', function (s) {
    s.msg = "hello world!!!!";

}]);

////////////////////////////////////////////////////////////////////////Custom validation and other function/////////////////////////////////////////////////////////////////////////////////////////////

var errorObj = {
    name: "",
    email: "",
    password: "",
    passwordC: "",
    phone: ""
}


function isEmptyFiled(obj, fieldName) {
    var msg = '';
    if (!obj) return msg = 'Required Field!';
    if (fieldName == 'name') {
        if (!/^[a-zA-Z.-_\s]{4,50}$/.test(obj)) return msg = 'Only character and ._- are allow and not less 4!';
    }
    if (fieldName == 'email') {
        if (!/^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$/g.test(obj)) return msg = 'Only valid email is allow!';
    }
    if (fieldName == 'phone') {
        if (!/^\d{11}$/g.test(obj)) return msg = 'Only 11 digit phone no is allow!';
    }
    if (fieldName == 'nid') {
        if (!/^\d{13}$/g.test(obj)) return msg = 'Only 13 digit nid no. is allow!';
    }
    return msg;
}


function passwordCheck(obj, objC) {
    var msg = '';
    if (!obj) return msg = 'Required Field!';
    if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/g.test(obj)) return msg = 'Minimum 8 characters at least 1 Uppercase Alphabet, 1 Lowercase Alphabet and 1 Number:!';
    if (objC && obj != objC) return msg = "Password and Confirm password didn't match";
    return msg;
}


//// Function for create User controller

var userObj = {
    id: "",
    version: "",
    name: "",
    email: "",
    password: "",
    passwordC: "",
    phone: "",
    userRole: ""

}

function initCreateUserUI(scope) {
    scope.name = "";
    scope.email = "";
    scope.password = "";
    scope.passwordC = "";
    scope.phone = "";
    scope.userRole = "";
}


function createUserObj(fromUi) {
    var createUserNewObj = {
        id: "",
        version: "",
        name: fromUi.name,
        password: fromUi.password,
        email: fromUi.email,
        phone: fromUi.phone,
        role: convertRoleToUserType(fromUi.userRole)
    }

    return createUserNewObj;
}


function clearUI(scope) {
    scope.validationError = null;
    scope.user = null;

}

//Function for change password controller

var passObj = {
    id: "",
    version: "",
    userName: "",
    oldPassword: "",
    newPassword: "",
    confirmPassword: ""

}

var passErrorObj = {
    userName: "",
    oldPassword: "",
    newPassword: "",
    confirmPassword: ""

}


function initChangPasswordUI(scope) {
    scope.id = "";
    scope.version = "";
    scope.userName = "";
    scope.oldPassword = "";
    scope.newPassword = "";
    scope.confirmPassword = "";

}

//Function for update User controller

function convertRoleToUserType(role) {
    var userType = '';
    switch (role) {
        case 'ROLE_ADMIN':
            userType = 'Admin';
            break;
        case 'ROLE_USER':
            userType = 'User';
            break;
        case 'ROLE_SUPER_ADMIN':
            userType = 'Super Admin';
            break;
        case 'ROLE_OTHER':
            userType = 'Other';
            break;
        default :
            userType = 'User';
    }
    return userType;

}


function initUpdateUserObj(scope) {
    scope.id = "";
    scope.version = "";
    scope.name = "";
    scope.email = "";
    scope.password = "";
    scope.phone = "";
    scope.userRole = "";
}


var UpdateUserObj = {
    id: "",
    version: "",
    name: "",
    email: "",
    password: "",
    passwordC: "",
    phone: "",
    role: ""

}


function initUpdateUserUI(scope) {
    scope.name = "";
    scope.email = "";
    scope.password = "";
    scope.phone = "";
    scope.userRole = "";
}


function updateUserObj(fromUi) {
    var updateUserNewObj = {
        id: fromUi.id,
        version: fromUi.version,
        name: fromUi.name,
        password: "test1234",
        email: fromUi.email,
        phone: fromUi.phone,
        role: fromUi.userRole
    }

    return updateUserNewObj;
}


function setUiValue(ui, scope) {
    ui.id = scope.id;
    ui.version = scope.version;
    ui.name = scope.name;
    ui.email = scope.email;
    ui.phone = scope.phone;
    ui.userRole = convertRoleToUserType(scope.role);

}


function setValueToUserList(id, scope, list) {
    var tr = document.getElementById(id);
    var td = tr.getElementsByTagName("td");
    list.userList[list.index].id = scope.id;
    list.userList[list.index].version = scope.version;
    list.userList[list.index].name = scope.name;
    list.userList[list.index].email = scope.email;
    list.userList[list.index].phone = scope.phone;
    list.userList[list.index].role = scope.role;

}

function loadUserInfo(scope, obj, index) {
    scope.index = index;
    scope.user.id = obj.id;
    scope.user.version = obj.version;
    scope.user.name = obj.name;
    scope.user.userRole = convertRoleToUserType(obj.role);
    scope.user.email = obj.email;
    scope.user.phone = obj.phone;

}

//Function for Delete User controller

function deleteRow(rowid) {
    var row = document.getElementById(rowid);
    row.parentNode.removeChild(row);
}


// Function for create customer controller



var customerObj = {
    id: "",
    version: "",
    name: "",
    email: "",
    nid: "",
    phone: "",
    address: ""

}

function initCreateCustomerUI(scope) {
    scope.name = "";
    scope.email = "";
    scope.nid = "";
    scope.address = "";
    scope.phone = "";
}


function createCustomerObj(fromUi) {
    var createCustomerNewObj = {
        id: "",
        version: "",
        name: fromUi.name,
        nid: fromUi.nid,
        email: fromUi.email,
        phone: fromUi.phone,
        address: fromUi.address
    }

    return createCustomerNewObj;
}


function clearUI(scope) {
    scope.validationError = null;
    scope.customer = null;

}

var customerErrorObj = {
    name: "",
    email: "",
    phone: "",
    address: "",
    nid: ""
}

//Common function used to all


function redirectToLogin(Storage, data, window, eventName) {
    if (eventName != 'changePassword') {
        Storage.msg = data.invalidUserError;
        Storage.isLoggedUserInvalid = 'yes';

    }
    if (eventName == 'changePassword') {
        Storage.msg = data.successMsg;
        Storage.changePassword = 'yes';
    }

    window.location.href = 'http://localhost:8080/login';
}


function getErrorMessage(code) {
    var msg = "";
    switch (code) {
        case 500:
            msg = 'Internal Server Error';
            break;
        case 502:
            msg = 'Bad Gateway';
            break;
        case 503:
            msg = 'Service Unavailable';
            break;
        case 504:
            msg = 'Gateway Timeout';
            break;
        case 505:
            msg = 'HTTP Version Not Supported';
            break;
        case 511:
            msg = 'Network Authentication Required';
            break;
        case 400:
            msg = 'Bad Request';
            break;
        case 401:
            msg = 'Unauthorized';
            break;
        case 403:
            msg = 'Forbidden';
            break;
        case 404:
            msg = 'Not Found';
            break;
        case 405:
            msg = 'Method Not Allowed';
            break;
        default :
            msg = "Something went wrong";
    }

    return msg + '.Please contact with System Admin.'

}